{"componentChunkName":"component---src-templates-post-js","path":"/notes/using-ssi/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Using SSI to detect cookies","date":"2016-10-24T00:00:00.000Z","date_pretty":"October 24th, 2016","date_from_now":"3 years ago","last_modified_at":"2019-11-05T19:50:51.000Z","last_modified_at_from_now":"5 months ago","path":"/notes/using-ssi/","author":null,"excerpt":"In my never ending quest to micro-optimize the hell out of my site, I ran into a snag when trying to use SSI directives to improve the loading of critical CSS and cached stylesheets.","tags":["TIL","web development","Jekyll"],"image":null,"toc":null,"comments":null,"comments_locked":null,"hide_meta":null},"id":"7495f7e9-5ed8-55b1-8135-bfcceed1a771","html":"<p>In my never ending quest to micro-optimize the hell out of my site, I ran into a snag when trying to use <abbr title=\"Server Side Includes\">SSI</abbr> directives.</p>\n<p><a href=\"https://github.com/mmistakes/made-mistakes-jekyll/tree/10.3.0\">Version 10.2</a> of this site was my half-baked attempt at <a href=\"/articles/using-jekyll-2016/#critical-path-css\">eliminating render-blocking CSS</a> to speed up page loads. By manually inlining critical CSS via a <a href=\"http://jekyllrb.com/docs/templates/#includes\">Jekyll include</a> and using <a href=\"https://github.com/filamentgroup/loadCSS\"><strong>loadCSS</strong></a> to asynchronously load the rest — I did pretty good.</p>\n<p><img src=\"../../images/mm-home-pagespeed-021116.jpg\" alt=\"Made Mistakes version 10 analyzed with Google&#x27;s PageSpeed Insights tool\"></p>\n<p>This workflow wasn’t ideal for a variety of reasons:</p>\n<ol>\n<li>Manual process.</li>\n<li>Need to maintain separate “critical” stylesheets for inlining.</li>\n<li>Included a bunch of declarations that aren’t critical to rendering “above the fold” content — causing some file size bloat.</li>\n</ol>\n<p>So with the help of <a href=\"https://github.com/addyosmani/critical\"><strong>Critical</strong></a> (and friends) I attempted to automated the process. Getting it working within the constraints of a Jekyll site with thousands of posts wasn’t easy, but I got close with <a href=\"https://github.com/mmistakes/made-mistakes-jekyll/tree/master/gulp/tasks\">a set of Gulp tasks</a>. A tale for another day unfortunately…</p>\n<p>Sorry a little off topic there, back to <abbr title=\"Server Side Includes\">SSI</abbr> directives.</p>\n<p>I learned that to speed up things for repeat visitors, loading a cached version of the CSS instead of waiting for <strong>loadCSS</strong> to do its thing was preferred. By using Filament Group’s aptly named <a href=\"https://github.com/filamentgroup/enhance\"><strong>Enhance.js</strong></a> project as a boilerplate, this could be achieved by dropping a cookie and using <abbr title=\"Server Side Includes\">SSI</abbr> directives.</p>\n<p>Structuring our HTML looks a little like like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--#if expr=\"$HTTP_COOKIE=/fullcss\\=true/\" --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>assets/stylesheets/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--#else--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n     <span class=\"token comment\">/* critical path CSS styles go here... */</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--#endif--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>assets/stylesheets/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <code class=\"language-text\">#if</code> and <code class=\"language-text\">#else</code> conditionals are <abbr title=\"Server Side Includes\">SSI</abbr> directives used by Apache to do some neat things. In this context they determine if a cookie named <code class=\"language-text\">fullcss</code> has been set. If it has, cached CSS files will load using a standard <code class=\"language-text\">&lt;link&gt;</code> element. If it hasn’t, the inline CSS will be rendered by the browser instead.</p>\n<p>For first time visitors:</p>\n<ol>\n<li>Critical CSS inlined within the <code class=\"language-text\">&lt;style&gt;</code> element will load almost instantly.</li>\n<li><strong>loadCSS</strong> script will asynchronously load the remaining page CSS as not to block rendering.</li>\n<li>A cookie will be set to trigger the loading of cached CSS on future page loads.</li>\n</ol>\n<p>After setting all this up and testing my pages against <a href=\"https://www.webpagetest.org/\"><strong>WebPagetest</strong></a>, <a href=\"https://developers.google.com/speed/pagespeed/insights/\"><strong>PageSpeed Insights</strong></a>, and <a href=\"https://gtmetrix.com/\"><strong>GTmetrix</strong></a> I saw an obvious drop in scrores. Apparently the <abbr title=\"Server Side Includes\">SSI</abbr> directives weren’t working as intended, causing <code class=\"language-text\">style.css</code> to render block each page load. Hmmmm…</p>\n<p>Oh right, maybe it’s Cloudflare’s <strong>Auto Minifying</strong> setting mucking around! Sure enough, as soon I disabled their HTML minifier, lines like <code class=\"language-text\">&lt;!--#if expr=&quot;$HTTP_COOKIE=/fullcss\\=true/&quot; --&gt;</code> remained untouched. Unfortunately <code class=\"language-text\">style.css</code> was still render blocking the page.</p>\n<figure>\n  <img alt=\"screenshot of Cloudflare's Auto Minify settings\" data-src=\"../../images/cloudflare-auto-minify.jpg\">\n  <figcaption><p>Auto Minify removes unnecessary characters from your source code (like extraneous whitespace and comments).</p></figcaption>\n</figure>\n<p>Dug a little deeper and discovered you have to configure your server to <a href=\"http://httpd.apache.org/docs/current/howto/ssi.html#configuring\">permit <abbr title=\"Server Side Includes\">SSI</abbr></a> before they’ll be recognized. Oops! Dropped these two lines in my <code class=\"language-text\">.htaccess</code> file and everything magically worked.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Options +Includes\nAddHandler server-parsed .shtml .html .htm</code></pre></div>\n<figure>\n  <img alt=\"Google PageSpeed Insights score screenshot\" data-src=\"../../images/pagespeed-insights-99-100.jpg\">\n  <figcaption><p>So close to 100. If it wasn't for the Google Analytics and AdSense scripts&hellip;</p></figcaption>\n</figure>","excerpt":"In my never ending quest to micro-optimize the hell out of my site, I ran into a snag when trying to use SSI directives. Version 10.2 of…","timeToRead":3,"tableOfContents":""},"comments":{"edges":[]}},"pageContext":{"next":{"frontmatter":{"path":"/notes/css-blur-effect/","title":"CSS blur effect","categories":["notes"],"tags":["TIL","web development"]},"fileAbsolutePath":"/home/balajin/Workspace/made-mistakes-gatsby/src/posts/notes/css-blur-effect.md"},"previous":{"frontmatter":{"path":"/notes/inktober-2016-failure/","title":"Inktober failure","categories":["notes"],"tags":["watercolor","portrait","illustration","Inktober"]},"fileAbsolutePath":"/home/balajin/Workspace/made-mistakes-gatsby/src/posts/notes/inktober-2016-failure.md"}}}}